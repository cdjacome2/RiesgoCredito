name: Deploy Prestamos Riesgo Crediticio to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  ECR_REGISTRY: 425784381978.dkr.ecr.us-east-2.amazonaws.com
  ECR_REPOSITORY: banquito-prestamos-analisis
  ECS_CLUSTER: banquito-cluster
  ECS_SERVICE: banquito-prestamos-analisis
  CONTAINER_NAME: analisis

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build with Maven
      run: |
        chmod +x mvnw
        ./mvnw clean package -DskipTests
        ls -la target/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image for $ECR_REPOSITORY..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        echo "Pushing Docker image..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "Tagging latest..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "Pushing latest..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Install jq (for JSON processing)
      run: |
        sudo apt-get update -y
        sudo apt-get install -y jq

    - name: Register new ECS task definition revision with new image
      env:
        IMAGE_TAG: ${{ github.sha }}
      run: |
        set -euo pipefail
        echo "Fetching current task definition for service $ECS_SERVICE..."
        TD_ARN=$(aws ecs describe-services \
          --cluster "$ECS_CLUSTER" \
          --services "$ECS_SERVICE" \
          --query "services[0].taskDefinition" \
          --output text)
        echo "Current TD: $TD_ARN"

        echo "Describing task definition..."
        aws ecs describe-task-definition --task-definition "$TD_ARN" --query "taskDefinition" > task-def.json

        echo "Sanitizing task definition for register-task-definition input..."
        cat task-def.json | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' > task-def-input.json

        IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        echo "Setting image $IMAGE_URI on container $CONTAINER_NAME..."
        cat task-def-input.json | jq --arg IMG "$IMAGE_URI" --arg NAME "$CONTAINER_NAME" \
          '.containerDefinitions |= map(if .name == $NAME then .image = $IMG else . end)' > task-def-updated.json

        echo "Registering new task definition revision..."
        NEW_TD_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-def-updated.json \
          --query "taskDefinition.taskDefinitionArn" \
          --output text)
        echo "NEW_TD_ARN=$NEW_TD_ARN" | tee -a $GITHUB_ENV

    - name: Update ECS service
      run: |
        set -euo pipefail
        echo "Updating ECS service $ECS_SERVICE in cluster $ECS_CLUSTER to task definition $NEW_TD_ARN..."
        aws ecs update-service --cluster "$ECS_CLUSTER" --service "$ECS_SERVICE" --task-definition "$NEW_TD_ARN"
        echo "Waiting for service to stabilize (up to ~15 min)..."
        # Default waiter is ~10m; implement a simple extended wait with diagnostics
        if ! aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" ; then
          echo "Waiter failed. Recent service events:"
          aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" \
            --query "services[0].events[:15]" --output table | cat
          echo "Load balancer and target group info:"
          TG_ARN=$(aws ecs describe-services --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE" --query "services[0].loadBalancers[0].targetGroupArn" --output text)
          echo "TargetGroup: $TG_ARN"
          if [ "$TG_ARN" != "None" ]; then
            aws elbv2 describe-target-health --target-group-arn "$TG_ARN" | cat || true
          fi
          exit 1
        fi